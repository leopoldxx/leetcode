package main

func reverseBits(num uint32) uint32 {
	var result uint32
	for i := 0; i < 16; i++ {
		b1 := (num & (1 << i)) << (31 - i<<1)
		b2 := (num & (0x80000000 >> i)) >> (31 - i<<1)
		result |= b1
		result |= b2
	}
	return result
}

/*
func reverseBits(num uint32) uint32 {
	return ((num & 0x80000000) >> 31) |
		((num & 0x40000000) >> 29) |
		((num & 0x20000000) >> 27) |
		((num & 0x10000000) >> 25) |
		((num & 0x08000000) >> 23) |
		((num & 0x04000000) >> 21) |
		((num & 0x02000000) >> 19) |
		((num & 0x01000000) >> 17) |
		((num & 0x00800000) >> 15) |
		((num & 0x00400000) >> 13) |
		((num & 0x00200000) >> 11) |
		((num & 0x00100000) >> 9) |
		((num & 0x00080000) >> 7) |
		((num & 0x00040000) >> 5) |
		((num & 0x00020000) >> 3) |
		((num & 0x00010000) >> 1) |
		((num & 0x00008000) << 1) |
		((num & 0x00004000) << 3) |
		((num & 0x00002000) << 5) |
		((num & 0x00001000) << 7) |
		((num & 0x00000800) << 9) |
		((num & 0x00000400) << 11) |
		((num & 0x00000200) << 13) |
		((num & 0x00000100) << 15) |
		((num & 0x00000080) << 17) |
		((num & 0x00000040) << 19) |
		((num & 0x00000020) << 21) |
		((num & 0x00000010) << 23) |
		((num & 0x00000008) << 25) |
		((num & 0x00000004) << 27) |
		((num & 0x00000002) << 29) |
		((num & 0x00000001) << 31)
}
*/
